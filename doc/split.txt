*split-nvim-txt*

                ___       __                                         
               /\_ \   __/\ \__                    __                
     ____  ____\//\ \ /\_\ \ ,_\      ___   __  __/\_\    ___ ___    
    /',__\/\ '__ \ \ \\/\ \ \ \/    /' _  \/\ \/\ \/\ \ /' __  __ \  
   /\__,  \ \ \L\ \_\ \\ \ \ \ \_ __/\ \/\ \ \ \_/ \ \ \/\ \/\ \/\ \ 
   \/\____/\ \ ,__/\____\ \_\ \__/\_\ \_\ \_\ \___/ \ \_\ \_\ \_\ \_\
    \/___/  \ \ \/\/____/\/_/\/__\/_/\/_/\/_/\/__/   \/_/\/_/\/_/\/_/
             \ \_\                                                   
              \/_/                                                   

       ·  A simple, powerful Neovim plugin for adding linebreaks ·    


==============================================================================
Table of Contents                                               *split.contents*

Introduction ······················································ |split-nvim|
Interactivity ············································ |split.interactivity|
Configuration ··················································· |split.config|
Utilities ························································ |split.utils|
Algorithm ···················································· |split.algorithm|

==============================================================================
Introduction                                                        *split-nvim*

split.nvim is a Neovim plugin for inserting linebreaks when lines of code
start to get too long. Usually I use it for stuff like this:

>lua
    -- Initial text:
    local foo = { 123, "4,5,6", { 7, 8, 9 } }

    -- Text after splitting (I use `gs` to enter operator-pending mode,
    -- then `iB` to split within the outermost curly braces)
    local foo = {
        123,
        "4,5,6",
        { 7, 8, 9 }
    }
<

                                                                *split.features*
*  Interactivity: split.nvim supports an interactive mode which allows
   you to use shortcuts for complex split patterns. For example, you might
   press `<` in interactive mode to split text by any of `<`, `<=`, `>`,
   `>=`, and `==`. See |split.interactivity| for more information.

*  Comments: split.nvim is aware of comments and supports tree-sitter.
   If you try to split a region with both commented and uncommented code,
   only the uncommented code will be affected.

*  braces/quotes: split.nvim is aware of braces and quotes, and
   generally will not insert linebreaks in these regions unless you want it
   to. If you want to break up text within a set of quotes or brackets, use
   one of vim's built-in text objects, e.g. `gsib` to split within `()`,
   `gsiB` to split within `{}`, `gsi"` to split within `""`, etc.

*  Indentation: split.nvim will by default reapply indentation after
   splitting text. By default this is done using the default indenter (see
   |=|), but this is configurable :)

                                                                   *split.setup*
To use split.nvim you need to first call `setup()` to create the default
mappings: `gs` to split by `,` in operator-pending mode, and `gS` to split
in interactive mode, which allows you to choose from a wider variety of
split patterns. You can easily change the default behaviour by passing a
table of options to `setup()`. See |split.config.SplitConfigInput| for
the full set of configuration options.

                                                   *split.operator_pending_mode*
split.nvim is designed to be primarily used in |operator-pending| mode. E.g.
if your mappings are `gs`/`gss` and you want to split arguments within some
code like `do_stuff(a = 1, b = 2, c = 3)`, you can first hit `gs` to enter
operator-pending mode, then the text-object `ib` (think 'in braces') to
apply the split within the pair of parentheses `()`. This is particularly
handy because this will work even if your cursor is before the parentheses
themselves! ✨

You can also use `gss` to split an entire line, but since split.nvim will
by default not insert linebreaks within parentheses or quotes which lie within
the selected text, this will not do the same thing as `gsib`.

To learn more about operator-pending mode, see |operator-pending| and
|text-objects|.

M.setup({config?})                                            *split-nvim.setup*
    Configure the behaviour of split.nvim

    Parameters: ~
        {config?} (SplitConfigInput) User configuration

    See: ~
        |split.config|

    Usage: ~
>lua
        -- Use the default configuration
        require("split").setup()

        -- Some custom config, in this case a super simple setup that splits 
        -- on commas or semicolons and doesn't use operator-pending mode.
        require("split").setup({
            keymaps = {
                ["<leader>s"] = {
                    pattern = "[,;]",
                    operator_pending = false
                }
            }
        })
<


==============================================================================
Interactivity                                              *split.interactivity*

When split.nvim is called in interactive mode, the user will be
prompted to enter options to perform the split. In this mode,
special keys are used to enter non-standard options:

* <C-x> can be used to enter a non-standard split pattern
* <CR> can be used to cycle through the options for where
  linebreaks are placed relative to the split pattern
* <C-s> can be used to toggle whether the original line
  breaks should be retained in addition to the new ones.

To execute the split in interactive mode, use one of the options
set during configuration - see |split.config.SplitConfigInput|.
E.g. by default you can use `.` to split lines by sentence, `;` to split
lines by semicolon, etc.

                                           *split.interactivity.default_aliases*
When using split.nvim in interactive mode, the default pattern aliases
are as follows:

* `","`: Split on commas.

* `";"`: Split on semicolons.

* `" "`: Split on one or more whitespace characters.

* `"+"`: Split on `+`, `-`, `/`, and `%`, provided these are
       surrounded by one or more whitespace characters.

* `"<"`: Split by `<`, `<=`, `==`, `>`, or `>=`.

* `"."`: Split text so that each sentence occupies a single line.

==============================================================================
Configuration                                                     *split.config*

SplitConfigInput                                 *split.config.SplitConfigInput*

    Fields: ~
        {keymaps?} (table<string,SplitOpts>)
            A table of keymappings. Table keys should give a keymapping to set,
            table values should be a subset of |split.config.SplitOpts|.
        {interactive_options?} (table<string,string|SplitOpts>)
            A table of aliases to use in interactive mode. Table keys give the
            alias, which should be a single character, and table values give
            the pattern to use when that character is entered by the user.
            Alternatively you can specify a table of |split.config.SplitOpts|
            to further customise the behaviour of each alias.
            See |split.interactivity.default_aliases| for the default aliases.
        {keymap_defaults?} (SplitOpts)
            Options to use by default when setting keymaps.
        {set_default_mappings} (boolean)
            You can set this option to `false` if you don't want to the default mappings
            to be set when `require("split").setup()` is called.


SplitOpts                                               *split.config.SplitOpts*
    Plugin configuration

    Fields: ~
        {pattern?} (string|string[])
            The lua pattern to split on. Defaults to `","`. Multiple patterns
            can also be provided in a table if a single string doesn't give
            enough flexibility.
        {break_placement?} (BreakPlacement|fun(line_info:LineInfo,opts:SplitOpts):BreakPlacement)
            Where to place the linebreak in relation to the split pattern. By
            default the linebreak will be inserted after the pattern. For
            fine-grained control you can pass a function which
            accepts |split.algorithm.LineInfo| and |split.config.SplitOpts|.
            This function should return one of |split.config.BreakPlacement|.
        {operator_pending?} (boolean)
            Whether to enter operator-pending mode when the mapping is called
        {transform_separators?} (fun(x:string,opts:SplitOpts,info:LineInfo):string)
            A function to be applied to each separator before the split text is
            recombined. This function will be passed the element being
            transformed, the configuration for the current keymapping
            (see |split.config.SplitOpts|), and information about the current
            line (see |split.algorithm.LineInfo|)
        {transform_segments?} (fun(x:string,opts:SplitOpts,info:LineInfo):string)
            A function to be applied to each segment before the split text is
            recombined. This function will be passed the element being
            transformed, the configuration for the current keymapping
            (see |split.config.SplitOpts|), and information about the current
            line (see |split.algorithm.LineInfo|)
        {indenter?} ("equalprg"|"lsp"|"none"|fun(range:integer[]))
            The type of indentation to apply. This can be one of the following
            options:
             - `"equalprg"` to use the same indentation as <=>. This is the
               default option.
             - `"lsp"` to use your LSP server's indentation, if applicable
               (note that some LSP servers will indent the whole file if this
               option is set)
             - A function that will be passed the range over which to apply the
               indentation. This range will be in the form
               `{start_row, start_col, end_row, end_col}`. Rows/cols are
               (1, 0)-indexed.
             - `"none"` to not apply indentation.
        {unsplitter?} (string|nil)
            A string that can be used to collapse lines into a single string
            before splitting. This can be helpful, e.g. if you want to
            transform multiple lines of text so that each line contains a
            single sentence.
        {interactive?} (boolean)
            Whether to enter interactive mode when calling the mapping.
            Defaults to `false`.
        {smart_ignore?} (SmartIgnore)
            If the selected region contains both commented and uncommented
            code, this option controls which portions should be split. Note
            that this only takes effect if the selected region contains a mix
            of commented and uncommented code; if the selected region is
            completely commented, the split will still be applied even if
            `smart_ignore = "commments"`. It's so smart!
            See |split.config.SmartIgnore| for available options.
        {brace_characters?} ({left:string[],right:string[]})
            Characters used to delimit quoted regions, within which
            linebreaks will not be inserted. By default, this applies to
            double-quotes, single-quotes, and backticks.
        {quote_characters?} ({left:string[],right:string[]})
            Characters used to delimit embraced regions, within which
            linebreaks will not be inserted. By default, recognised brace pairs
            are `[]`, `()`, and `{}`.


BreakPlacement                                     *split.config.BreakPlacement*
    Options for `break_placement`

    Variants: ~
        ("after_pattern")   Place the linbreak before the split pattern
        ("before_pattern")  Place the linebreak after the split pattern
        ("on_pattern")      Replace the split pattern with a linebreak


SmartIgnore                                           *split.config.SmartIgnore*
    Options for `smart_ignore`. These options only take effect if the
    region being split contains a mix of commented and uncommented
    code.

    Variants: ~
        ("comments")  Only split commented regions
        ("code")      Only split uncommented regions
        ("none")      Split everything


                                                         *split.config.defaults*
The following gives the full default configuration for `split.nvim`:
>lua
    {
        keymaps = {
            ["gs"]  = {
                pattern = ",",
                operator_pending = true,
                interactive = false,
            },
            ["gss"] = {
                pattern = ",",
                operator_pending = false,
                interactive = false,
            },
            ["gS"]  = {
                pattern = ",",
                operator_pending = true,
                interactive = true,
            },
            ["gSS"] = {
                pattern = ",",
                operator_pending = false,
                interactive = true,
            },
        },
        interactive_options = {
            [","] = ",",
            [";"] = ";",
            [" "] = "%s+",
            ["+"] = " [+-/%%] ",
            ["<"] = {
                pattern = "[<>=]=?",,
                break_placement = "before_pattern"
            },
            ["."] = {
                pattern = "[%.?!]%s+",
                unsplitter = " ",
                smart_ignore = "code",
                quote_characters = {},
                brace_characters = {}
            }
        },
        keymap_defaults = {
            pattern = ",",
            break_placement = "after_pattern",
            operator_pending = false,
            transform_segments = require("split.utils").make_transformer({
                trim_l = { "before_pattern", "on_pattern", "after_pattern" },
                trim_r = { "before_pattern", "on_pattern", "after_pattern" },
            }),
            transform_separators = require("split.utils").make_transformer({
                trim_l = { "before_pattern" },
                trim_r = { "before_pattern", "on_pattern", "after_pattern" },
                pad_r = { "before_pattern" }
            }),
            indenter = "equalprg",
            unsplitter = nil,
            interactive = false,
            smart_ignore = "comments",
            quote_characters = { left = { "'", '"', "`" }, right = { "'", '"', "`" } },
            brace_characters = { left = { "(", "{", "[" }, right = { ")", "}", "]" } }
        },
        set_default_mappings = true
    }
<

See also |split.utils.make_transformer|.

SplitConfig                                           *split.config.SplitConfig*

    Fields: ~
        {keymaps} (table<string,SplitOpts>)
        {interactive_options} (table<string,string|SplitOpts>)
        {keymap_defaults} (SplitOpts)
        {set_default_mappings} (boolean)


Config:set({cfg})                                             *split.config:set*

    Parameters: ~
        {cfg} (SplitConfigInput)


Config:get()                                                  *split.config:get*

    Returns: ~
        (SplitConfig)


==============================================================================
Utilities                                                          *split.utils*

M.make_transformer({tb})                          *split.utils.make_transformer*
    Create a transformer function to apply to separators/segments

    Usually the transformations you'll want to apply will involve adding or
    removing leading/trailing whitespace, depending on where the linebreak sits
    in relation to split pattern. This helper makes it easy to create such
    functions.


    Parameters: ~
        {tb} ({trim_l:BreakPlacement[],trim_r:BreakPlacement[],pad_l:BreakPlacement[],pad_r:BreakPlacement[]})

    Usage: ~
>lua
        require("split").setup({
            keymap_defaults = {
                -- Always remove leading/trailing whitespace
                transform_segments = require("split.utils").make_transformer({
                    trim_l = { "before_pattern", "on_pattern", "after_pattern" },
                    trim_r = { "before_pattern", "on_pattern", "after_pattern" },
                }),
                -- - Remove leading whitespace if the linebreak comes before the
                --   split pattern
                -- - Always remove trailing whitespace
                -- - Add leading whitespace if the linebreak comes before the
                --   split pattern
                transform_separators = require("split.utils").make_transformer({
                    trim_l = { "before_pattern" },
                    trim_r = { "before_pattern", "after_pattern" },
                    pad_r = { "before_pattern" }
                }),
            }
        })
<


==============================================================================
Algorithm                                                      *split.algorithm*

                                                      *split.algorithm.overview*
The algorithm for splitting lines broadly consists of the following
stages:

1. Each line is split into sub-lines based on the provided
   pattern(s):
   - Unless the user specifies otherwise, a split will not occur if
     the pattern falls within a special range, e.g. a pair of quotes
     or a pair of brackets.
   - If some of the lines to be split are comments, none of the commented
     lines will be split. If all of the lines are commments, they will
     be split as usual.
   - Lines are uncommented so that comment strings don't appear
     in the wrong places later.
2. Line parts are transformed using the given transformation
   functions. The default transformations involve removing
   leading/trailing whitespace, and possibly adding some padding to
   the portions of the line matched by the provided pattern.
3. The 'separator' and 'segment' portions of the original lines are
   recombined pairwise to give the new lines.
4. The newly constructed lines are 'unsplit', in effect removing the
    original linebreaks if a replacement string is provided by the user.
    Note that here, linebreaks are only replaced within contiguous chunks of
    commented/uncommented lines.
5. Commenting is reapplied to the new lines.
6. If the user called split.nvim within a line, leading and new lines are
   added to the results if they don't already exist.
7. The new lines are inserted into the buffer.

                                                         *split.algorithm.split*
M.split({lines}, {start_line_full?}, {end_line_full?}, {range?}, {linewise?}, {opts})
    Split text by a pattern

    This is a low-level interface for the split.nvim algorithm. This may be
    of interest to particularly brave users. Note that this function doesn't
    apply indentation to the result, since calculating indentation usually
    requires the context of the surrounding text.


    Parameters: ~
        {lines} (string[]) Lines to split
        {start_line_full?} (string) The complete text for line 1
        {end_line_full?} (string) The complete text for the last line
        {range?} (integer[]) The range over which the text is being split. Used
              with treesitter to determine which portions are commented.
        {linewise?} (boolean) Whether the text is being split in line mode.
        {opts} (SplitOpts|nil) Additional options; see |split.config.SplitOpts| for more
            information.

    Returns: ~
        (string[][])  A table where each element corresponds to one of
              the original lines. Elements will themselves be arrays of strings, where
              each string is a line of text in the result.


LineInfo                                              *split.algorithm.LineInfo*

    Fields: ~
        {commented} (boolean)
            Whether the line is commented
        {commenter} (fun(s:string):string)
            A function to recomment the line
        {filetype} (string)
            The filetype associated with the line
        {break_placement} (BreakPlacement)
            The break placement for the current line -
            see |split.config.SplitOpts| for more information.
        {indent} (string)
            The amount of indent for the line. If the line is commented, this
            will be the indent _after_ the comment string.


SegSepPair                                          *split.algorithm.SegSepPair*
    When a line is split, the result is an array where each element
    conforms to this pattern.

    Fields: ~
        {seg} (string)
            A portion of the line which wasn't matched by the pattern.
        {sep?} (string)
            A portion of the line which was matched by the provided pattern.


vim:tw=78:ts=8:noet:ft=help:norl:
